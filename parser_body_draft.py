
# 一段解析html 草稿
import re
import time

start=time.time()
body='\n\n              \n<style>/* override theme */\ntable img {\n  max-width: 100%;\n}\n\n/* override var element to differentiate color from comment */\nvar, var code, var span, .prettyprint var span {\n  color: #039be5;\n}\n\n/* .devsite-terminal virtualenv prompt */\n.tfo-terminal-venv::before {\n  content: "(venv) $ " !important;\n}\n\n/* .devsite-terminal root prompt */\n.tfo-terminal-root::before {\n  content: "# " !important;\n}\n\n/* .devsite-terminal Windows prompt */\n.tfo-terminal-windows::before {\n  content: "C:\\\\> " !important;\n}\n\n/* .devsite-terminal Windows prompt w/ virtualenv */\n.tfo-terminal-windows-venv::before {\n  content: "(venv) C:\\\\> " !important;\n}\n\ndevsite-code .tfo-notebook-code-cell-output {\n  max-height: 300px;\n  overflow: auto;\n  background: rgba(255, 247, 237, 1);  /* orange bg to distinguish from input code cells */\n}\n\ndevsite-code .tfo-notebook-code-cell-output + .devsite-code-buttons-container button {\n  background: rgba(255, 247, 237, .7);  /* orange bg to distinguish from input code cells */\n}\n\ndevsite-code[dark-code] .tfo-notebook-code-cell-output {\n  background: rgba(64, 78, 103, 1);  /* medium slate */\n}\n\ndevsite-code[dark-code] .tfo-notebook-code-cell-output + .devsite-code-buttons-container button {\n  background: rgba(64, 78, 103, .7);  /* medium slate */\n}\n\n/* override default table styles for notebook buttons */\n.devsite-table-wrapper .tfo-notebook-buttons {\n  display: inline-block;\n  margin-left: 3px;\n  width: auto;\n}\n\n.tfo-notebook-buttons td {\n  padding-left: 0;\n  padding-right: 20px;\n}\n\n.tfo-notebook-buttons a,\n.tfo-notebook-buttons :link,\n.tfo-notebook-buttons :visited {\n  border-radius: 8px;\n  box-shadow: 0 1px 2px 0 rgba(60, 64, 67, .3), 0 1px 3px 1px rgba(60, 64, 67, .15);\n  color: #202124;\n  padding: 12px 24px;\n  transition: box-shadow 0.2s;\n}\n\n.tfo-notebook-buttons a:hover,\n.tfo-notebook-buttons a:focus {\n  box-shadow: 0 1px 2px 0 rgba(60, 64, 67, .3), 0 2px 6px 2px rgba(60, 64, 67, .15);\n}\n\n.tfo-notebook-buttons tr {\n  background: 0;\n  border: 0;\n}\n\n/* on rendered notebook page,\n   remove link to webpage since we\'re already here */\n.tfo-notebook-buttons:not(.tfo-api) td:first-child {\n  display: none;\n}\n\n.tfo-notebook-buttons td > a {\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.tfo-notebook-buttons td > a > img {\n  margin-right: 8px;\n}\n\n/* landing pages */\n\n.tfo-landing-row-item-inset-white {\n  background-color: #fff;\n  padding: 32px;\n}\n\n.tfo-landing-row-item-inset-white ol,\n.tfo-landing-row-item-inset-white ul {\n  padding-left: 20px;\n}\n\n/* colab callout button */\n.colab-callout-row devsite-code {\n  border-radius: 8px 8px 0 0;\n  box-shadow: none;\n}\n\n.colab-callout-footer {\n  background: #e3e4e7;\n  border-radius: 0 0 8px 8px;\n  color: #37474f;\n  padding: 20px;\n}\n\n.colab-callout-row devsite-code[dark-code] + .colab-callout-footer {\n  background: #3f4f66;\n}\n\n\n.colab-callout-footer > .button {\n  margin-top: 4px;\n  color: #ff5c00;\n}\n\n.colab-callout-footer > a > span {\n  padding-top: 10px;\n  vertical-align: middle;\n  color: #37474f;\n  padding-left: 10px;\n  padding-right: 10px;\n  font-size: 14px;\n}\n\n.colab-callout-row devsite-code[dark-code] + .colab-callout-footer > a > span {\n  color: #fff;\n}\n\na.colab-button {\n  background: rgba(255, 255, 255, .75);\n  border: solid 1px rgba(0, 0, 0, .08);\n  border-bottom-color: rgba(0, 0, 0, .15);\n  border-radius: 4px;\n  color: #aaa;\n  display: inline-block;\n  font-size: 11px !important;\n  font-weight: 300;\n  line-height: 16px;\n  padding: 4px 8px;\n  text-decoration: none;\n  text-transform: uppercase;\n}\n\na.colab-button:hover {\n  background: white;\n  border-color: rgba(0, 0, 0, .2);\n  color: #666;\n}\n\na.colab-button span {\n  background: url(/images/colab_logo_button.svg) no-repeat 1px 1px / 20px;\n  border-radius: 4px;\n  display: inline-block;\n  padding-left: 24px;\n  text-decoration: none;\n}\n\n@media screen and (max-width: 600px) {\n  .tfo-notebook-buttons td {\n    display: block;\n  }\n}\n\n/* guide and tutorials landing page cards and sections */\n\n.tfo-landing-page-card {\n  padding: 16px;\n  box-shadow: 0 0 36px rgba(0,0,0,0.1);\n  border-radius: 10px;\n}\n\n/* Page section headings */\n.tfo-landing-page-heading h2, h2.tfo-landing-page-heading {\n  font-family: "Google Sans", sans-serif;\n  color: #425066;\n  font-size: 30px;\n  font-weight: 700;\n  line-height: 40px;\n}\n\n/* Item title headings */\n.tfo-landing-page-heading h3, h3.tfo-landing-page-heading,\n.tfo-landing-page-card h3, h3.tfo-landing-page-card {\n  font-family: "Google Sans", sans-serif;\n  color: #425066;\n  font-size: 20px;\n  font-weight: 500;\n  line-height: 26px;\n}\n\n/* List of tutorials notebooks for subsites */\n.tfo-landing-page-resources-ul {\n  padding-left: 15px\n}\n\n.tfo-landing-page-resources-ul > li {\n  margin: 6px 0;\n}</style>\n\n<!-- DO NOT EDIT! Automatically generated file. -->\n\n<div itemscope="" itemtype="http://developers.google.com/ReferenceObject">\n<meta itemprop="name" content="tf.boolean_mask">\n<meta itemprop="path" content="Stable">\n</div>\n\n\n\n<!-- Insert buttons -->\n\n我是内容啊啊<div class="devsite-table-wrapper"><table class="tfo-notebook-buttons tfo-api" align="left">\n\n<tbody><tr><td>\n  <a target="_blank" href="/versions/r1.15/api_docs/python/tf/boolean_mask">\n  <img src="https://tensorflow.google.cn/images/tf_logo_32px.png">\n  TensorFlow 1 version</a>\n</td>\n\n<td>\n  <a target="_blank" href="https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/array_ops.py#L1521-L1571">\n    <img src="https://tensorflow.google.cn/images/GitHub-Mark-32px.png">\n    View source on GitHub\n  </a>\n</td></tr></tbody></table></div>\n\n<!-- Start diff -->\n\n<p>Apply boolean mask to tensor.</p>\n\n<devsite-heading text="Aliases:" for="aliases" level="h3" link="" toc=""><h3 id="aliases" is-upgraded="">Aliases:<button role="button" class="devsite-heading-link button-flat material-icons" data-title="Copy link to this section"></button></h3></devsite-heading>\n\n<ul>\n<li><a href="/api_docs/python/tf/boolean_mask"><code translate="no" dir="ltr">tf.compat.v2.boolean_mask</code></a></li>\n</ul>\n<devsite-code><pre class="lang-python" translate="no" dir="ltr" is-upgraded=""><code dir="ltr"><span class="pln">tf</span><span class="pun">.</span><span class="pln">boolean_mask</span><span class="pun">(</span><span class="pln"><br>&nbsp; &nbsp; tensor</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; mask</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; axis</span><span class="pun">=</span><span class="kwd">None</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; name</span><span class="pun">=</span><span class="str">\'boolean_mask\'</span><span class="pln"><br></span><span class="pun">)</span><span class="pln"><br></span></code></pre><div class="devsite-code-buttons-container"><button class="gc-analytics-event material-icons devsite-icon-code-dark devsite-toggle-dark" data-category="Site-Wide Custom Events" data-label="Dark Code Toggle" track-type="exampleCode" track-name="darkCodeToggle" data-title="Dark code theme"></button><button class="gc-analytics-event material-icons devsite-icon-code-light devsite-toggle-light" data-category="Site-Wide Custom Events" data-label="Light Code Toggle" track-type="exampleCode" track-name="lightCodeToggle" data-title="Light code theme"></button><button class="gc-analytics-event material-icons devsite-icon-copy" data-category="Site-Wide Custom Events" data-label="Click To Copy" track-type="exampleCode" track-name="clickToCopy" data-title="Copy"></button></div></devsite-code>\n<!-- Placeholder for "Used in" -->\n\n<p>Numpy equivalent is <code translate="no" dir="ltr">tensor[mask]</code>.</p>\n<devsite-code><pre class="lang-python" translate="no" dir="ltr" is-upgraded=""><code dir="ltr"><span class="com"># 1-D example</span><span class="pln"><br>tensor </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pun">]</span><span class="pln"><br>mask </span><span class="pun">=</span><span class="pln"> np</span><span class="pun">.</span><span class="pln">array</span><span class="pun">([</span><span class="kwd">True</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">False</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">True</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">False</span><span class="pun">])</span><span class="pln"><br>boolean_mask</span><span class="pun">(</span><span class="pln">tensor</span><span class="pun">,</span><span class="pln"> mask</span><span class="pun">)</span><span class="pln"> &nbsp;</span><span class="com"># [0, 2]</span><span class="pln"><br></span></code></pre><div class="devsite-code-buttons-container"><button class="gc-analytics-event material-icons devsite-icon-code-dark devsite-toggle-dark" data-category="Site-Wide Custom Events" data-label="Dark Code Toggle" track-type="exampleCode" track-name="darkCodeToggle" data-title="Dark code theme"></button><button class="gc-analytics-event material-icons devsite-icon-code-light devsite-toggle-light" data-category="Site-Wide Custom Events" data-label="Light Code Toggle" track-type="exampleCode" track-name="lightCodeToggle" data-title="Light code theme"></button><button class="gc-analytics-event material-icons devsite-icon-copy" data-category="Site-Wide Custom Events" data-label="Click To Copy" track-type="exampleCode" track-name="clickToCopy" data-title="Copy"></button></div></devsite-code>\n<p>In general, <code translate="no" dir="ltr">0 &lt; dim(mask) = K &lt;= dim(tensor)</code>, and <code translate="no" dir="ltr">mask</code>\'s shape must match\nthe first K dimensions of <code translate="no" dir="ltr">tensor</code>\'s shape.  We then have:\n  <code translate="no" dir="ltr">boolean_mask(tensor, mask)[i, j1,...,jd] = tensor[i1,...,iK,j1,...,jd]</code>\nwhere <code translate="no" dir="ltr">(i1,...,iK)</code> is the ith <code translate="no" dir="ltr">True</code> entry of <code translate="no" dir="ltr">mask</code> (row-major order).\nThe <code translate="no" dir="ltr">axis</code> could be used with <code translate="no" dir="ltr">mask</code> to indicate the axis to mask from.\nIn that case, <code translate="no" dir="ltr">axis + dim(mask) &lt;= dim(tensor)</code> and <code translate="no" dir="ltr">mask</code>\'s shape must match\nthe first <code translate="no" dir="ltr">axis + dim(mask)</code> dimensions of <code translate="no" dir="ltr">tensor</code>\'s shape.</p>\n\n<p>See also: <a href="https://tensorflow.google.cn/api_docs/python/tf/ragged/boolean_mask"><code translate="no" dir="ltr">tf.ragged.boolean_mask</code></a>, which can be applied to both dense and\nragged tensors, and can be used if you need to preserve the masked dimensions\nof <code translate="no" dir="ltr">tensor</code> (rather than flattening them, as <a href="https://tensorflow.google.cn/api_docs/python/tf/boolean_mask"><code translate="no" dir="ltr">tf.boolean_mask</code></a> does).</p>\n\n<devsite-heading text="Args:" for="args" level="h4" link=""><h4 id="args" is-upgraded="">Args:<button role="button" class="devsite-heading-link button-flat material-icons" data-title="Copy link to this section"></button></h4></devsite-heading>\n\n<ul>\n<li><b><code translate="no" dir="ltr">tensor</code></b>:  N-D tensor.</li>\n<li><b><code translate="no" dir="ltr">mask</code></b>:  K-D boolean tensor, K &lt;= N and K must be known statically.</li>\n<li><b><code translate="no" dir="ltr">axis</code></b>:  A 0-D int Tensor representing the axis in <code translate="no" dir="ltr">tensor</code> to mask from. By\ndefault, axis is 0 which will mask from the first dimension. Otherwise K +\naxis &lt;= N.</li>\n<li><b><code translate="no" dir="ltr">name</code></b>:  A name for this operation (optional).</li>\n</ul>\n\n<devsite-heading text="Returns:" for="returns" level="h4" link=""><h4 id="returns" is-upgraded="">Returns:<button role="button" class="devsite-heading-link button-flat material-icons" data-title="Copy link to this section"></button></h4></devsite-heading>\n\n<p>(N-K+1)-dimensional tensor populated by entries in <code translate="no" dir="ltr">tensor</code> corresponding\nto <code translate="no" dir="ltr">True</code> values in <code translate="no" dir="ltr">mask</code>.</p>\n\n<devsite-heading text="Raises:" for="raises" level="h4" link=""><h4 id="raises" is-upgraded="">Raises:<button role="button" class="devsite-heading-link button-flat material-icons" data-title="Copy link to this section"></button></h4></devsite-heading>\n\n<ul>\n<li><b><code translate="no" dir="ltr">ValueError</code></b>:  If shapes do not conform.</li>\n</ul>\n\n<devsite-heading text="Examples:" for="examples" level="h4" link=""><h4 id="examples" is-upgraded="">Examples:<button role="button" class="devsite-heading-link button-flat material-icons" data-title="Copy link to this section"></button></h4></devsite-heading>\n<devsite-code><pre class="lang-python" translate="no" dir="ltr" is-upgraded=""><code dir="ltr"><span class="com"># 2-D example</span><span class="pln"><br>tensor </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[[</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">],</span><span class="pln"> </span><span class="pun">[</span><span class="lit">3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">4</span><span class="pun">],</span><span class="pln"> </span><span class="pun">[</span><span class="lit">5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">6</span><span class="pun">]]</span><span class="pln"><br>mask </span><span class="pun">=</span><span class="pln"> np</span><span class="pun">.</span><span class="pln">array</span><span class="pun">([</span><span class="kwd">True</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">False</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">True</span><span class="pun">])</span><span class="pln"><br>boolean_mask</span><span class="pun">(</span><span class="pln">tensor</span><span class="pun">,</span><span class="pln"> mask</span><span class="pun">)</span><span class="pln"> &nbsp;</span><span class="com"># [[1, 2], [5, 6]]</span><span class="pln"><br></span></code></pre><div class="devsite-code-buttons-container"><button class="gc-analytics-event material-icons devsite-icon-code-dark devsite-toggle-dark" data-category="Site-Wide Custom Events" data-label="Dark Code Toggle" track-type="exampleCode" track-name="darkCodeToggle" data-title="Dark code theme"></button><button class="gc-analytics-event material-icons devsite-icon-code-light devsite-toggle-light" data-category="Site-Wide Custom Events" data-label="Light Code Toggle" track-type="exampleCode" track-name="lightCodeToggle" data-title="Light code theme"></button><button class="gc-analytics-event material-icons devsite-icon-copy" data-category="Site-Wide Custom Events" data-label="Click To Copy" track-type="exampleCode" track-name="clickToCopy" data-title="Copy"></button></div></devsite-code>\n\n  <style> {width:100%}    </style> <ul><li>111</li><li>222</li><li>333<ul><li>1111</li><li>2221</li><li>3333</li><li>4444</li></ul></li><li><ul><li>5555</li><li>6666</li><li>7777</li><li><ul><li>aaaa</li><li>bbbb</li><li>cccc</li><li>dddd</li></ul></li><ul><li>eeee</li><li>ffff</li><li>gggg</li><li>hhhh</li></ul></ul>444</li><ol><li>啊啊啊</li><li>哦哦哦</li></ol></ul>   '


body=body.strip()
body=body.replace('\n','')

# 移除style
style_len= re.findall(r'</style>',body)
for remove_style in style_len:
    body=re.sub(r'<style(.*?)</style>','',body,count=1)

# 移除script
script_len=re.findall(r'</script>',body)
if len(script_len):
    for remove_script in script_len:
        body=re.sub(r'<script(.*?)</script>','',body,count=1)

# 移除注释
code_annotation_len=re.findall(r'-->',body)
if len(code_annotation_len):
    for remove_code_annotation in code_annotation_len:
        body=re.sub(r'<!--(.*?)-->','',body,count=1)


meta_len=re.findall(r'<meta',body)

if len(meta_len):
    for remove_meta in meta_len:
        body=re.sub(r'<meta(.*?)>','',body,count=1)


print('HTML代码初始化',body)


print(333,body.find('<'))

print('出现次数：',body.count('<'))

find_count_len= body.count('<')

# 返回<所在的索引值
start_end_index_array=[m.start() for m in re.finditer('<',body)]

print('start_end_str:',start_end_index_array)


# 拿到<所在字符，右移找到它的开始节点字符，并组成字符串,比较粗劣

start_cheap_str_array=[{"tag_name":s.group(),'index':s.start()} for s in re.finditer(r'(<(.*?)>)|(<(.*?) )',body)]

# print('长度：',len(start_cheap_str_array),start_cheap_str_array)

# TODO 最好能在这部分，组装attrs 参数好href src id class 等数据,所在的所在的索引值
start_careful_str_array=[]
for item in start_cheap_str_array:
    if not '</' in item['tag_name']:
        # 类似<div class="name">
        if ' ' in item['tag_name']:
            if 'href' in item['tag_name']:
                item['href']=re.sub(r'^.*href="(.*?)".*$','\\1',item['tag_name'])
            if 'src' in item['tag_name']:
                item['src']=re.sub(r'^.*src="(.*?)".*$','\\1',item['tag_name'])
            item_group_blank_space=re.match(r'<(.*?) ',item['tag_name'])
            item['tag_name']=item_group_blank_space.group().strip()
            start_careful_str_array.append(item)
        # 类似<div>
        else:
            item_group_no_blank_space=re.match(r'<(.*?)>',item['tag_name'])
            item['tag_name']=item_group_no_blank_space.group().strip()
            start_careful_str_array.append(item)
    else:
        item['tag_name']=item['tag_name'].strip()
        start_careful_str_array.append(item)

print('细致化后的结果：','长度=',len(start_careful_str_array),start_careful_str_array) # ['<div', '</div>', '<div', '<table', '<tbody>', '<tr>', '<td>', '<a', '<img','</a>',...]



# ----------------------------------------------
end=time.time()
print('执行时间：',end-start)
